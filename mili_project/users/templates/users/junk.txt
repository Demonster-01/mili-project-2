
@csrf_protect
# def register(request):
#     if request.method == 'POST':
#         first_name = request.POST.get('firstname')
#         last_name = request.POST.get('lastname')
#         email = request.POST.get('email')
#         house_no = request.POST.get('house_no')
#         password = request.POST.get('password')
#         password2 = request.POST.get('password2')

#         # Basic validation
#         if not (first_name and last_name and email and house_no and password and password2):
#             messages.warning(request, 'Please fill in all fields.')
#             return render(request, 'users/register.html', {'invalid_creds': True})

#         if password != password2:
#             messages.warning(request, 'Passwords do not match.')
#             return render(request, 'users/register.html', {'invalid_creds': True})

#         if User.objects.filter(email=email).exists():
#             messages.warning(request, 'This email is already registered.')
#             return render(request, 'users/register.html', {'invalid_creds': True})

#         # Create a new user
#         user = User.objects.create_user(
#             email=email,
#             username=email,
#             password=password
#         )
#         user.first_name = first_name
#         user.last_name = last_name

#         user.save()
#         # Create a new profile
#         profile = Profile(user=user, house_no=house_no)
#         profile.save()

#         messages.success(request, 'Registration successful. You can now login.')
#         return HttpResponseRedirect(reverse('user:login')) # Redirect to login page or any other page

#     return render(request, 'users/register.html')



# @login_required
# def profile(request):
#     if request.user.is_authenticated:
#         profile = Profile.objects.get(user=request.user)
#         return render(request, 'users/profile.html', {'profile': profile, 'user': request.user})
#     else:
#         return redirect('login')






























  body {
    background-image: url('../photos/farm.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    color: #fff;
    background-attachment: fixed;
    /* filter: grayscale(10); */
}

/* .login-container {
    padding: 40px;
    margin: 100px auto;
    width: 100%;
    height: 70%;
    border-radius: 10px;
    background-color: #f39b9b;
    box-shadow: 0px 0px 15px 2px rgba(140, 153, 228, 0.856);
    position: relative;
    z-index: 1;

    justify-content: center;
    align-items: center;
    text-align: center;
    
    background-image: url('../photos/doodle.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    /* overflow: hidden; */
    /* transform: translateY(20%); 
    
} */

.loginform h1 {
    text-align: center;
    color: #ffffff;
    margin-bottom: 20px;
    
    text-shadow: 0px 4px 14px rgba(150, 159, 236, 0.815);
}

.login-container input[type="text"],
.login-container input[type="email"],
.login-container input[type="password"] {
    width: 70%;
    padding: 10px;
    margin: 20px;
    border: none;
    border-bottom: 3px solid rgb(199, 243, 4);
    border-radius: 5px;
    outline: none;
}

.login-container input[type="submit"] {
    width: 30%;
    padding: 10px;
    border: none;
    background-color: #32db5ccb;
    color: #fff;
    cursor: pointer;
    border-radius: 5px;
}

.login-container input[type="submit"]:hover {
    background-color: #09f528ce;
    color: rgb(5, 5, 5);
    font-weight: bolder;
}

.login-container a {
    color: #b7dd0e;
    text-decoration: none;
    display: inline-block; 
    transition: transform 0.3s ease;
}

.login-container a:hover {
    color: #fa0606;
    transform: scale(1.1);
    background-color: #f0eff1;
    border-radius: 5px;
    font-weight: bold;
}




/* Register css start */


/* Define the style for small messages */
.small-message {
    
    font-size: 14px; /* Adjust the font size as needed */
    padding: 5px 10px; /* Adjust padding as desired */
    margin: 5px;
    border-radius: 40px;
  }

  .alert{
    overflow: hidden;
  }






















  
def profile(request):
if request.method == 'POST':
    u_form = UserUpdateForm(request.POST, instance=request.user)
    p_form = ProfileUpdateForm(request.POST,
                               request.FILES,
                               instance=request.user.profile)
    if u_form.is_valid() and p_form.is_valid():
        u_form.save()
        p_form.save()
        messages.success(request, f'Your account has been updated!')
        return redirect('user:profile')

else:
    try:
        user_profile = request.user.profile
        u_form = UserUpdateForm(instance=request.user)
        p_form = ProfileUpdateForm(instance=request.user.profile)

        context = {
            'u_form': u_form,
            'p_form': p_form,
            'user_profile':user_profile
            }
    except ObjectDoesNotExist:
        user_profile = None  # Handle the case where the profile doesn't exist
    # return render(request, 'users/profile.html', {'user_profile': user_profile})
    return render(request, 'users/profile.html', context)
# return render(request, 'users/profile.html', context)


















def save(self, *args, **kwargs):
super(Profile, self).save(*args, **kwargs)

img = Image.open(self.image.path)

if img.height > 300 or img.width > 300:
    output_size = (300,300)
    img.thumbnail(output_size)
    img.save(self.image.path)

# @receiver(post_save, sender=User)
# def create_profile(sender, instance, created, **kwargs):
#     if created:
#         Profile.objects.create(user=instance)