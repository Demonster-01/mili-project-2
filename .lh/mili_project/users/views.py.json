{
    "sourceFile": "mili_project/users/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1704724881379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704724895678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-from django.shortcuts import render\r\n \r\n+from django.shortcuts import render, redirect\r\n+from django.contrib.auth import authenticate, login\r\n+\r\n # Create your views here.\r\n def login(request):\r\n     return render(request, 'users/login.html')\r\n \r\n def register(request):\r\n     return render(request, 'users/register.html')\r\n \r\n-from django.shortcuts import render, redirect\r\n-from django.contrib.auth import authenticate, login\r\n \r\n def custom_login(request):\r\n     if request.method == 'POST':\r\n         username = request.POST.get('username')\r\n"
                },
                {
                    "date": 1704724915329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n from django.shortcuts import render, redirect\r\n from django.contrib.auth import authenticate, login\r\n \r\n # Create your views here.\r\n-def login(request):\r\n-    return render(request, 'users/login.html')\r\n+# def login(request):\r\n+#     return render(request, 'users/login.html')\r\n \r\n def register(request):\r\n     return render(request, 'users/register.html')\r\n \r\n@@ -21,5 +21,5 @@\n             return redirect('success_url_name')\r\n         else:\r\n             # Handle invalid login\r\n             return render(request, 'your_login_template.html', {'invalid_creds': True})\r\n-    return render(request, 'login.html')\r\n+     return render(request, 'users/login.html')\r\n"
                },
                {
                    "date": 1704724965538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             login(request, user)\r\n             # Redirect to a success page or wherever you want after login\r\n-            return redirect('success_url_name')\r\n+            return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n             return render(request, 'your_login_template.html', {'invalid_creds': True})\r\n-     return render(request, 'users/login.html')\r\n+    return render(request, 'users/login.html')\r\n"
                },
                {
                    "date": 1704725017681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n def register(request):\r\n     return render(request, 'users/register.html')\r\n \r\n \r\n-def custom_login(request):\r\n+def login(request):\r\n     if request.method == 'POST':\r\n         username = request.POST.get('username')\r\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n"
                },
                {
                    "date": 1704725059032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,6 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-            return render(request, 'your_login_template.html', {'invalid_creds': True})\r\n+           return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n"
                },
                {
                    "date": 1704725565351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,18 @@\n \r\n from django.shortcuts import render, redirect\r\n from django.contrib.auth import authenticate, login\r\n \r\n+from django.contrib import messages\r\n+from django.http import HttpResponseRedirect\r\n+from django.contrib.auth.models import User\r\n+\r\n # Create your views here.\r\n # def login(request):\r\n #     return render(request, 'users/login.html')\r\n \r\n-def register(request):\r\n-    return render(request, 'users/register.html')\r\n+# def register(request):\r\n+#     return render(request, 'users/register.html')\r\n \r\n \r\n def login(request):\r\n     if request.method == 'POST':\r\n@@ -22,4 +26,42 @@\n         else:\r\n             # Handle invalid login\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n+\r\n+\r\n+\r\n+\r\n+def register(request):\r\n+    if request.method == 'POST':\r\n+        first_name = request.POST.get('firstname')\r\n+        last_name = request.POST.get('lastname')\r\n+        email = request.POST.get('email')\r\n+        house_no = request.POST.get('house_no')\r\n+        password = request.POST.get('password')\r\n+        password2 = request.POST.get('password2')\r\n+\r\n+        # Basic validation, you might want to add more robust validation\r\n+        if not (first_name and last_name and email and house_no and password and password2):\r\n+            messages.error(request, 'Please fill in all fields.')\r\n+            return HttpResponseRedirect(request.path_info)\r\n+\r\n+        if password != password2:\r\n+            messages.error(request, 'Passwords do not match.')\r\n+            return HttpResponseRedirect(request.path_info)\r\n+\r\n+        # Check if the email is already registered\r\n+        if User.objects.filter(email=email).exists():\r\n+            messages.error(request, 'This email is already registered.')\r\n+            return HttpResponseRedirect(request.path_info)\r\n+\r\n+        # If all validations pass, create a new user\r\n+        user = User.objects.create_user(email=email, username=email, password=password)\r\n+        user.first_name = first_name\r\n+        user.last_name = last_name\r\n+        # Additional user fields can be set here\r\n+\r\n+        user.save()\r\n+        messages.success(request, 'Registration successful. You can now login.')\r\n+        return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n+\r\n+    return render(request, 'your_template.html')  # Replace 'your_template.html' with your actual template name\r\n"
                },
                {
                    "date": 1704725674597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n         return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n \r\n-    return render(request, 'your_template.html')  # Replace 'your_template.html' with your actual template name\r\n+    return render(request, 'user/register.html')  # Replace 'your_template.html' with your actual template name\r\n"
                },
                {
                    "date": 1704725684301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n         return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n \r\n-    return render(request, 'user/register.html')  # Replace 'your_template.html' with your actual template name\r\n+    return render(request, 'users/register.html')  # Replace 'your_template.html' with your actual template name\r\n"
                },
                {
                    "date": 1704726374995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n+           messages.success(request, 'Login fail. Try again.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727131504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.success(request, 'Login fail. Try again.')\r\n+           messages.danger(request, 'Login fail. Try again.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727175423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.danger(request, 'Login fail. Try again.')\r\n+           messages.warning(request, 'Login fail. Try again.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727311510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.warning(request, 'Login fail. Try again.')\r\n+           messages.WARNING(request, 'Login fail. Try again.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727332175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.WARNING(request, 'Login fail. Try again.')\r\n+           messages.alert(request, 'Login fail. Try again.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727344376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.alert(request, 'Login fail. Try again.')\r\n+           messages.success(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727393387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.success(request, 'Login fail. Try.')\r\n+           messages.error(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727467207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.error(request, 'Login fail. Try.')\r\n+           messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727803902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.warning(request, 'Login fail. Try.')\r\n+        #    messages.warning(request, 'Login fail. Try.')\r\n+           messages.warning(request, 'Please log in to proceed with the booking.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704727821336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-        #    messages.warning(request, 'Login fail. Try.')\r\n-           messages.warning(request, 'Please log in to proceed with the booking.')\r\n+           messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704728073657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.warning(request, 'Login fail. Try.')\r\n+           messages.warning(request, 'Login fail. Try.', extra_tags='warning')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704728096275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n             # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n-           messages.warning(request, 'Login fail. Try.', extra_tags='warning')\r\n+           messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n"
                },
                {
                    "date": 1704728114908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             login(request, user)\r\n-            # Redirect to a success page or wherever you want after login\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n"
                },
                {
                    "date": 1704728301723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         username = request.POST.get('username')\r\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n-            login(request, user)\r\n+            auth_login(request, user)\r\n             return redirect(request,'bako_mili/index.html')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n"
                },
                {
                    "date": 1704728347925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \r\n from django.shortcuts import render, redirect\r\n-from django.contrib.auth import authenticate, login\r\n-\r\n+from django.contrib.auth import authenticate, login as auth_login\r\n from django.contrib import messages\r\n from django.http import HttpResponseRedirect\r\n from django.contrib.auth.models import User\r\n \r\n"
                },
                {
                    "date": 1704728875190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             auth_login(request, user)\r\n-            return redirect(request,'bako_mili/index.html')\r\n+            # return redirect(request,'bako_mili/index.html')\r\n+            return redirect('bako_mili:index')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n"
                },
                {
                    "date": 1704729190375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             auth_login(request, user)\r\n-            # return redirect(request,'bako_mili/index.html')\r\n-            return redirect('bako_mili:index')\r\n+            return redirect(request,'bako_mili/index.html')\r\n+            # return redirect('bako_mili:index')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n"
                },
                {
                    "date": 1704729394033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n # def register(request):\r\n #     return render(request, 'users/register.html')\r\n \r\n-\r\n+@csrf_protect\r\n def login(request):\r\n     if request.method == 'POST':\r\n         username = request.POST.get('username')\r\n         password = request.POST.get('password')\r\n"
                },
                {
                    "date": 1704729413193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from django.contrib import messages\r\n from django.http import HttpResponseRedirect\r\n from django.contrib.auth.models import User\r\n \r\n+from django.views.decorators.csrf import csrf_protect\r\n # Create your views here.\r\n # def login(request):\r\n #     return render(request, 'users/login.html')\r\n \r\n@@ -29,9 +30,9 @@\n     return render(request, 'users/login.html')\r\n \r\n \r\n \r\n-\r\n+@csrf_protect\r\n def register(request):\r\n     if request.method == 'POST':\r\n         first_name = request.POST.get('firstname')\r\n         last_name = request.POST.get('lastname')\r\n"
                },
                {
                    "date": 1704729515831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             auth_login(request, user)\r\n-            return redirect(request,'bako_mili/index.html')\r\n-            # return redirect('bako_mili:index')\r\n+            # return redirect(request,'bako_mili/index.html')\r\n+            return redirect('bako_mili:index')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n"
                },
                {
                    "date": 1704729626951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             auth_login(request, user)\r\n             # return redirect(request,'bako_mili/index.html')\r\n-            return redirect('bako_mili:index')\r\n+            return redirect('bako_mili:index.html')\r\n         else:\r\n             # Handle invalid login\r\n            messages.warning(request, 'Login fail. Try.')\r\n            return render(request, 'users/login.html', {'invalid_creds': True})\r\n"
                },
                {
                    "date": 1704729749801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,25 +13,22 @@\n # def register(request):\r\n #     return render(request, 'users/register.html')\r\n \r\n @csrf_protect\r\n-def login(request):\r\n+def login_view(request):\r\n     if request.method == 'POST':\r\n         username = request.POST.get('username')\r\n         password = request.POST.get('password')\r\n         user = authenticate(request, username=username, password=password)\r\n         if user is not None:\r\n             auth_login(request, user)\r\n-            # return redirect(request,'bako_mili/index.html')\r\n-            return redirect('bako_mili:index.html')\r\n+            return redirect('bako_mili:index')  # Replace 'bako_mili:index' with your desired redirect URL\r\n         else:\r\n-            # Handle invalid login\r\n-           messages.warning(request, 'Login fail. Try.')\r\n-           return render(request, 'users/login.html', {'invalid_creds': True})\r\n+            messages.warning(request, 'Login failed. Try again.')\r\n+            return render(request, 'users/login.html', {'invalid_creds': True})\r\n     return render(request, 'users/login.html')\r\n \r\n \r\n-\r\n @csrf_protect\r\n def register(request):\r\n     if request.method == 'POST':\r\n         first_name = request.POST.get('firstname')\r\n"
                },
                {
                    "date": 1704730118995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,5 +61,5 @@\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n         return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n \r\n-    return render(request, 'users/register.html')  # Replace 'your_template.html' with your actual template name\r\n+    return render(request, 'users:register')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704730154200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,5 +61,5 @@\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n         return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n \r\n-    return render(request, 'users:register')\n\\ No newline at end of file\n+    return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704731243172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,36 +30,29 @@\n \r\n @csrf_protect\r\n def register(request):\r\n     if request.method == 'POST':\r\n-        first_name = request.POST.get('firstname')\r\n-        last_name = request.POST.get('lastname')\r\n-        email = request.POST.get('email')\r\n-        house_no = request.POST.get('house_no')\r\n-        password = request.POST.get('password')\r\n-        password2 = request.POST.get('password2')\r\n+        form = RegistrationForm(request.POST)\r\n+        if form.is_valid():\r\n+            email = form.cleaned_data['email']\r\n+            if User.objects.filter(email=email).exists():\r\n+                messages.error(request, 'This email is already registered.')\r\n+                return HttpResponseRedirect(request.path_info)\r\n \r\n-        # Basic validation, you might want to add more robust validation\r\n-        if not (first_name and last_name and email and house_no and password and password2):\r\n-            messages.error(request, 'Please fill in all fields.')\r\n-            return HttpResponseRedirect(request.path_info)\r\n+            user = User.objects.create_user(\r\n+                email=email,\r\n+                username=email,\r\n+                password=form.cleaned_data['password']\r\n+            )\r\n+            user.first_name = form.cleaned_data['first_name']\r\n+            user.last_name = form.cleaned_data['last_name']\r\n+            # Set additional user fields here\r\n+            \r\n+            user.save()\r\n+            messages.success(request, 'Registration successful. You can now login.')\r\n+            return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n+        else:\r\n+            messages.error(request, 'Please correct the form errors.')\r\n+    else:\r\n\\ No newline at end of file\n+        form = RegistrationForm()\r\n \r\n-        if password != password2:\r\n-            messages.error(request, 'Passwords do not match.')\r\n-            return HttpResponseRedirect(request.path_info)\r\n-\r\n-        # Check if the email is already registered\r\n-        if User.objects.filter(email=email).exists():\r\n-            messages.error(request, 'This email is already registered.')\r\n-            return HttpResponseRedirect(request.path_info)\r\n-\r\n-        # If all validations pass, create a new user\r\n-        user = User.objects.create_user(email=email, username=email, password=password)\r\n-        user.first_name = first_name\r\n-        user.last_name = last_name\r\n-        # Additional user fields can be set here\r\n-\r\n-        user.save()\r\n-        messages.success(request, 'Registration successful. You can now login.')\r\n-        return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n-\r\n-    return render(request, 'users/register.html')\n+    return render(request, 'users/register.html', {'form': form})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704731456055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,29 +30,39 @@\n \r\n @csrf_protect\r\n def register(request):\r\n     if request.method == 'POST':\r\n-        form = RegistrationForm(request.POST)\r\n-        if form.is_valid():\r\n-            email = form.cleaned_data['email']\r\n-            if User.objects.filter(email=email).exists():\r\n-                messages.error(request, 'This email is already registered.')\r\n-                return HttpResponseRedirect(request.path_info)\r\n+        first_name = request.POST.get('firstname')\r\n+        last_name = request.POST.get('lastname')\r\n+        email = request.POST.get('email')\r\n+        house_no = request.POST.get('house_no')\r\n+        password = request.POST.get('password')\r\n+        password2 = request.POST.get('password2')\r\n \r\n-            user = User.objects.create_user(\r\n-                email=email,\r\n-                username=email,\r\n-                password=form.cleaned_data['password']\r\n-            )\r\n-            user.first_name = form.cleaned_data['first_name']\r\n-            user.last_name = form.cleaned_data['last_name']\r\n-            # Set additional user fields here\r\n-            \r\n-            user.save()\r\n-            messages.success(request, 'Registration successful. You can now login.')\r\n-            return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n\\ No newline at end of file\n-        else:\r\n-            messages.error(request, 'Please correct the form errors.')\r\n-    else:\r\n-        form = RegistrationForm()\r\n+        # Basic validation\r\n+        if not (first_name and last_name and email and house_no and password and password2):\r\n+            messages.error(request, 'Please fill in all fields.')\r\n+            return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n-    return render(request, 'users/register.html', {'form': form})\n+        if password != password2:\r\n+            messages.error(request, 'Passwords do not match.')\r\n+            return render(request, 'users/register.html', {'invalid_creds': True})\r\n+\r\n+        if User.objects.filter(email=email).exists():\r\n+            messages.error(request, 'This email is already registered.')\r\n+            return render(request, 'users/register.html', {'invalid_creds': True})\r\n+\r\n+        # Create a new user\r\n+        user = User.objects.create_user(\r\n+            email=email,\r\n+            username=email,\r\n+            password=password\r\n+        )\r\n+        user.first_name = first_name\r\n+        user.last_name = last_name\r\n+        # Additional user fields can be set here\r\n+\r\n+        user.save()\r\n+        messages.success(request, 'Registration successful. You can now login.')\r\n+        return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n+\r\n+    return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704732041730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,7 +62,7 @@\n         # Additional user fields can be set here\r\n \r\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n-        return HttpResponseRedirect('/login/')  # Redirect to login page or any other page\r\n+        return HttpResponseRedirect('user:login/')  # Redirect to login page or any other page\r\n \r\n     return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704732357953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,11 +58,15 @@\n             password=password\r\n         )\r\n         user.first_name = first_name\r\n         user.last_name = last_name\r\n-        # Additional user fields can be set here\r\n \r\n         user.save()\r\n+        # Create a new profile\r\n+        profile = Profile(user=user, house_no=house_no)\r\n+        profile.save()\r\n+\r\n+        user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n         return HttpResponseRedirect('user:login/')  # Redirect to login page or any other page\r\n \r\n     return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704732467903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n from django.contrib.auth import authenticate, login as auth_login\r\n from django.contrib import messages\r\n from django.http import HttpResponseRedirect\r\n from django.contrib.auth.models import User\r\n+from .models import Profile\r\n \r\n+\r\n from django.views.decorators.csrf import csrf_protect\r\n # Create your views here.\r\n # def login(request):\r\n #     return render(request, 'users/login.html')\r\n"
                },
                {
                    "date": 1704732589750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from django.contrib import messages\r\n from django.http import HttpResponseRedirect\r\n from django.contrib.auth.models import User\r\n from .models import Profile\r\n+from django.urls import reverse\r\n \r\n-\r\n from django.views.decorators.csrf import csrf_protect\r\n # Create your views here.\r\n # def login(request):\r\n #     return render(request, 'users/login.html')\r\n@@ -68,7 +68,7 @@\n         profile.save()\r\n \r\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n-        return HttpResponseRedirect('user:login/')  # Redirect to login page or any other page\r\n+        return HttpResponseRedirect(reverse('login')) # Redirect to login page or any other page\r\n \r\n     return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704732595005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,7 +68,7 @@\n         profile.save()\r\n \r\n         user.save()\r\n         messages.success(request, 'Registration successful. You can now login.')\r\n-        return HttpResponseRedirect(reverse('login')) # Redirect to login page or any other page\r\n+        return HttpResponseRedirect(reverse('user:login')) # Redirect to login page or any other page\r\n \r\n     return render(request, 'users/register.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704732694702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             messages.error(request, 'Passwords do not match.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         if User.objects.filter(email=email).exists():\r\n-            messages.error(request, 'This email is already registered.')\r\n+            messages.warning(request, 'This email is already registered.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         # Create a new user\r\n         user = User.objects.create_user(\r\n"
                },
                {
                    "date": 1704732709469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,13 @@\n         password2 = request.POST.get('password2')\r\n \r\n         # Basic validation\r\n         if not (first_name and last_name and email and house_no and password and password2):\r\n-            messages.error(request, 'Please fill in all fields.')\r\n+            messages.warning(request, 'Please fill in all fields.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         if password != password2:\r\n-            messages.error(request, 'Passwords do not match.')\r\n+            messages.warning(request, 'Passwords do not match.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         if User.objects.filter(email=email).exists():\r\n             messages.warning(request, 'This email is already registered.')\r\n"
                },
                {
                    "date": 1704732754138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,14 +35,15 @@\n     if request.method == 'POST':\r\n         first_name = request.POST.get('firstname')\r\n         last_name = request.POST.get('lastname')\r\n         email = request.POST.get('email')\r\n+        username = request.POST.get('username')\r\n         house_no = request.POST.get('house_no')\r\n         password = request.POST.get('password')\r\n         password2 = request.POST.get('password2')\r\n \r\n         # Basic validation\r\n-        if not (first_name and last_name and email and house_no and password and password2):\r\n+        if not (first_name and last_name and email and username and house_no and password and password2):\r\n             messages.warning(request, 'Please fill in all fields.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         if password != password2:\r\n"
                },
                {
                    "date": 1704733205950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         password = request.POST.get('password')\r\n         password2 = request.POST.get('password2')\r\n \r\n         # Basic validation\r\n-        if not (first_name and last_name and email and username and house_no and password and password2):\r\n+        if not (first_name and last_name and email and house_no and password and password2):\r\n             messages.warning(request, 'Please fill in all fields.')\r\n             return render(request, 'users/register.html', {'invalid_creds': True})\r\n \r\n         if password != password2:\r\n"
                },
                {
                    "date": 1704733211185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n     if request.method == 'POST':\r\n         first_name = request.POST.get('firstname')\r\n         last_name = request.POST.get('lastname')\r\n         email = request.POST.get('email')\r\n-        username = request.POST.get('username')\r\n         house_no = request.POST.get('house_no')\r\n         password = request.POST.get('password')\r\n         password2 = request.POST.get('password2')\r\n \r\n"
                }
            ],
            "date": 1704724881379,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\r\n\r\n# Create your views here.\r\ndef login(request):\r\n    return render(request, 'users/login.html')\r\n\r\ndef register(request):\r\n    return render(request, 'users/register.html')\r\n\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth import authenticate, login\r\n\r\ndef custom_login(request):\r\n    if request.method == 'POST':\r\n        username = request.POST.get('username')\r\n        password = request.POST.get('password')\r\n        user = authenticate(request, username=username, password=password)\r\n        if user is not None:\r\n            login(request, user)\r\n            # Redirect to a success page or wherever you want after login\r\n            return redirect('success_url_name')\r\n        else:\r\n            # Handle invalid login\r\n            return render(request, 'your_login_template.html', {'invalid_creds': True})\r\n    return render(request, 'login.html')\r\n"
        }
    ]
}